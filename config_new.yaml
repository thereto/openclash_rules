p: &p {type: http, interval: 86400, health-check: {enable: true, url: "https://dns.cloudflare.com/generate_204", interval: 300}}

# 机场订阅
proxy-providers:
  飞鸟:
    <<: *p
    url: "http://192.168.0.110/flybird_sub"

  快猫:
    <<: *p
    url: "https://8ff4670e83ef4cd"

  牛逼:
    <<: *p
    url: "https://19db1b20d9c186c2d4258"

proxies:
  - name: "直连"
    type: direct
    udp: true

# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7127
tproxy-port: 7894
allow-lan: true
mode: rule
log-level: silent
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
interface-name: br-lan
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: "123456"
external-ui: "/usr/share/openclash/ui"
# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
  - "+.netflix.com"
  - "+.nflxvideo.net"
  - "+.amazonaws.com"
  - "+.media.dssott.com"
  skip-domain:
    - "+.apple.com"
    - Mijia Cloud
    - dlg.io.mi.com
    - "+.oray.com"
    - "+.sunlogin.net"
    - "+.push.apple.com"
  parse-pure-ip: true
# 入站
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true
dns:
  enable: true
  ipv6: false
  listen: 0.0.0.0:7874
  enhanced-mode: fake-ip
  fake-ip-range: 198.18.0.1/16
  use-hosts: true
  # 本地 DNS 查询失败时才使用 fallback，不主动触发
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
  # 默认本地 DNS，仅用于国内域名（通过 fallback-filter 控制）
  nameserver:
    - 202.103.44.150
    - 202.103.24.68
  # fallback DNS，通过代理远程解析，仅用于国外域名
  fallback:
    - https://dns.cloudflare.com/dns-query
    - https://dns.google/dns-query
  # fallback-filter 只允许非CN使用 fallback，也就是国外才走代理解析
  fallback-filter:
    geoip: true
    geoip-code: CN
    ipcidr:
      - 0.0.0.0/32
      - 127.0.0.0/8
      - 10.0.0.0/8
      - 192.168.0.0/16
      - 240.0.0.0/4
  # fallback 的查询通过代理进行
  proxy-server-nameserver:
    - 114.114.114.114
    - 119.29.29.29
    - https://dns.cloudflare.com/dns-query
    - https://dns.google/dns-query

  fake-ip-filter:
    - '*.lan'
    - '*.localdomain'
    - '*.example'
    - '*.invalid'
    - '*.localhost'
    - '*.test'
    - '*.local'
    - '*.home.arpa'
    - 'time.*.com'
    - 'curr.5ysdejn.xyz'
    - '+.fxlcn.com'
    - '+.fnxl.cc'
    - '+.xinglian.site'
    - '+.jisdk82.co'
    - '+.kuaimao2.club'
    - '+.x.kuaimaonodebgp.com'
    - '+.quickcht3.club'
  cache:
    size: 8192
    cache-timeout: 120


# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🎯 全球直连, 🚀 节点选择, 🇸🇬 快猫·新加坡, 🇭🇰 快猫·香港, 🇼🇸 快猫·台湾, 🇰🇷 快猫·韩国, 🇯🇵 快猫·日本, 🇬🇧 快猫·英国, 🇺🇸 快猫·美国, 🇸🇬 飞鸟·新加坡, 🇭🇰 飞鸟·香港, 🇼🇸 飞鸟·台湾, 🇰🇷 飞鸟·韩国, 🇯🇵 飞鸟·日本, 🇻🇳 飞鸟·越南, 🇺🇸 飞鸟·美国, 🇸🇬 牛逼·新加坡, 🇭🇰 牛逼·香港, 🇰🇷 牛逼·韩国]}
pr: &pr2 {type: select, proxies: [🎯 全球直连, 🇰🇷 快猫·韩国, 🇰🇷 飞鸟·韩国, 🇰🇷 牛逼·韩国]}
proxy-groups:
  - {name: 🚀 节点选择, type: select, proxies: [🔰 手动选择, 🇸🇬 快猫·新加坡, 🇭🇰 快猫·香港, 🇼🇸 快猫·台湾, 🇰🇷 快猫·韩国, 🇯🇵 快猫·日本, 🇬🇧 快猫·英国, 🇺🇸 快猫·美国, 🇸🇬 飞鸟·新加坡, 🇭🇰 飞鸟·香港, 🇼🇸 飞鸟·台湾, 🇰🇷 飞鸟·韩国, 🇯🇵 飞鸟·日本, 🇻🇳 飞鸟·越南, 🇺🇸 飞鸟·美国, 🇸🇬 牛逼·新加坡, 🇭🇰 牛逼·香港]}
  - {name: 💠 PandaAPI, <<: *pr2}
  - {name: ➰ PandaLive, <<: *pr2}
  - {name: ➰ PandaPlayList, <<: *pr}
  - {name: ➰ TTingLive, <<: *pr}
  - {name: 🔞 KoreaBJ, <<: *pr}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🌎 Google, <<: *pr}
  - {name: 💻 GitHub, <<: *pr}
  - {name: 🧿 AI服务, <<: *pr}
  - {name: 🎶 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: ✈ 测速工具, <<: *pr}
  - {name: 🎯 全球直连, type: select, proxies: [直连]}
  - {name: 🐋 漏网之鱼, <<: *pr}
  - {name: 🔰 手动选择, type: select, include-all: true}
  - {name: 🇸🇬 快猫·新加坡, type: url-test, use: [快猫], tolerance: 20, interval: 300, filter: "(?i)(新加坡|坡|狮城|SG|Singapore)"}
  - {name: 🇭🇰 快猫·香港, type: url-test, use: [快猫], tolerance: 20, interval: 300, filter: "(?i)(港|hk|hongkong|hong kong)"}
  - {name: 🇼🇸 快猫·台湾, type: url-test, use: [快猫], tolerance: 20, interval: 300, filter: "(?i)(台|新北|彰化|TW|Taiwan)"}
  - {name: 🇰🇷 快猫·韩国, type: url-test, use: [快猫], tolerance: 20, interval: 300, filter: "(?i)(KR|Korea|KOR|首尔|韩|韓)"}
  - {name: 🇯🇵 快猫·日本, type: url-test, use: [快猫], tolerance: 20, interval: 300, filter: "(?i)(日本|jp|japan)"}
  - {name: 🇬🇧 快猫·英国, type: url-test, use: [快猫], tolerance: 20, interval: 300, filter: "(?i)(英国|Great Britain|UK)"}
  - {name: 🇺🇸 快猫·美国, type: url-test, use: [快猫], tolerance: 20, interval: 300, filter: "(?i)(美|us|unitedstates|united states)"}
  - {name: 🇸🇬 飞鸟·新加坡, type: url-test, use: [飞鸟], tolerance: 20, interval: 300, filter: "(?i)(新加坡|坡|狮城|SG|Singapore)"}
  - {name: 🇭🇰 飞鸟·香港, type: url-test, use: [飞鸟], tolerance: 20, interval: 300, filter: "(?=.*(香港|hk|hongkong|hong kong))^((?!(ipv6)).)*$"}
  - {name: 🇼🇸 飞鸟·台湾, type: url-test, use: [飞鸟], tolerance: 20, interval: 300, filter: "(?i)(台|新北|彰化|TW|Taiwan)"}
  - {name: 🇰🇷 飞鸟·韩国, type: url-test, use: [飞鸟], tolerance: 20, interval: 300, filter: "(?i)(KR|Korea|KOR|首尔|韩|韓)"}
  - {name: 🇯🇵 飞鸟·日本, type: url-test, use: [飞鸟], tolerance: 20, interval: 300, filter: "(?=.*(日本|JP|(?i)Japan))^((?!(ipv6)).)*$"}
  - {name: 🇻🇳 飞鸟·越南, type: url-test, use: [飞鸟], tolerance: 20, interval: 300, filter: "(?i)(越南|vn|Vietnam)"}
  - {name: 🇺🇸 飞鸟·美国, type: url-test, use: [飞鸟], tolerance: 20, interval: 300, filter: "(?i)(美|us|unitedstates|united states)"}
  - {name: 🇰🇷 牛逼·韩国, type: url-test, use: [牛逼], tolerance: 20, interval: 300, filter: "(?i)(KR|Korea|KOR|首尔|韩|韓)"}
  - {name: 🇸🇬 牛逼·新加坡, type: url-test, use: [牛逼], tolerance: 20, interval: 300, filter: "^(?=.*(新加坡|坡|狮城|SG|Singapore))(?=.*(流媒体解锁)).*$"}
  - {name: 🇭🇰 牛逼·香港, type: url-test, use: [牛逼], tolerance: 20, interval: 300, filter: "^(?=.*(香港|hk|hongkong|hong kong))(?=.*(流媒体解锁)).*$"}

# 规则匹配 💠 PandaAPI：网站接口； ➰ PandaLive：原始直播源清晰度列表； ➰ PandaPlayList：TS片段播放列表； TS片段播放控制在🔞 KoreaBJ
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - DOMAIN-SUFFIX,pandalive.co.kr,💠 PandaAPI
  - DOMAIN-SUFFIX,us-west-2.playback.live-video.net,➰ PandaLive
  - DOMAIN-SUFFIX,playlist.live-video.net,➰ PandaPlayList
  - DOMAIN-SUFFIX,ttinglive.com,➰ TTingLive
  - RULE-SET,korea_bj,🔞 KoreaBJ
  - RULE-SET,private_domain,🎯 全球直连
  - RULE-SET,proxylite,🚀 节点选择
  - RULE-SET,github_domain,💻 GitHub
  - RULE-SET,tiktok_domain,🎶 TikTok
  - RULE-SET,speedtest_domain,✈ 测速工具
  - RULE-SET,ai,🧿 AI服务
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🌎 Google
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,google_ip,🌎 Google,no-resolve
  - RULE-SET,gfw_domain,🚀 节点选择
  - RULE-SET,cn_ip,🎯 全球直连,no-resolve
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - MATCH,🐋 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers:
  private_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  korea_bj: { <<: *class, url: "https://gh-proxy.com/https://raw.githubusercontent.com/thereto/openclash_rules/refs/heads/main/KoreaBJ.list"}
  proxylite: { <<: *class, url: "https://gh-proxy.com/https://raw.githubusercontent.com/thereto/openclash_rules/refs/heads/main/ProxyLite.list"}
  ai: {  <<: *domain, url: "https://gh-proxy.com/https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  speedtest_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://gh-proxy.com/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
